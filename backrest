#!/bin/bash


####################################################
# Backup & Restore
# by s3n0, 2019-2024
####################################################
# shell script for backing up and restoring user-defined files and folders in the Enigma2
####################################################


#BACKUP_DIR=""                              # leave blank, i.e. empty folder -> means the current directory (specified by Linux-Shell / terminal)
#BACKUP_DIR="/media/hdd/backrest_folder/"
#BACKUP_DIR="/home/root/backrest_folder/"
#BACKUP_DIR="/media/mmc/backrest_folder/"
#BACKUP_DIR="/hdd/backrest_folder/"
BACKUP_DIR="/tmp/backrest_folder/"

##### * WARNING !!! if you use the "/tmp" folder to backup, keep in mind that this is a TEMPORARY folder, created in the RAM-disk,
##### * so after restarting Linux, its contents will be deleted... therefore after backup, please temporarily copy the archive-file to your PC,
##### * and before restoring the data, copy the archive-file back to the backup subfolder in "/tmp"


FILE_PREFIX="e2-backup"                     # Note: The timestamp is automatically added at the end of the file name (as a file sufix) + the file extension will be set to ".tar.gz"


LIST="
/etc/enigma2/

/usr/share/enigma2/picon/
/media/hdd/picon/
/media/usb/picon/
/media/mmc/picon/
/media/mmc/picon-tpl/

/usr/share/enigma2/MetrixHD/skinparts/MetrixHD-infobar-mod-by-s3n0/

/etc/tuxbox/*.xml
/etc/auto.network
/etc/cron/crontabs/root

/usr/script/

/usr/bin/enigma2_pre_start.sh

/usr/bin/*cam*
/etc/init.d/softcam*
/etc/rc?.d/*softcam*
/etc/tuxbox/config/
/etc/CCcam.cfg
/usr/keys/

/usr/bin/udpxy
/etc/init.d/udpxy
/etc/rc?.d/*udpxy

/etc/init.d/iptv_*
/etc/rc?.d/*iptv_*
"


PLUGINS_TO_RESTORE="
enigma2-plugin-extensions-chocholousek-picons
enigma2-plugin-extensions-youtube
enigma2-plugin-skins-metrix-atv-fhd-icons
enigma2-plugin-systemplugins-fastscan
enigma2-plugin-systemplugins-serviceapp
exteplayer3
zerotier
curl
curlftpfs
htop
"




LIST=$(echo $LIST | tr "\n" " ")

PLUGINS_TO_RESTORE=$(echo $PLUGINS_TO_RESTORE | tr "\n" " ")




####################################################
####################################################

init_4_with_feedback() {
    echo "Stopping the Enigma..."
    init 4
    x=0
    while [ "$x" -le 15 ] && [ $(pidof enigma2) ] ; do
        x=$(( $x + 1 ))
        sleep 1
        echo "...$x seconds waiting"
        #echo "...Enigma state = "`ps --no-headers -o stat -C enigma2`      # debugging output - for testing purpose only
    done
    if pidof enigma2 > /dev/null 2>&1 ; then
        echo "...stopping failed ! the 'backrest' script was aborted !"
        exit 1
    else
        echo "...successfully stopped after $x seconds."
    fi
}

init_3_with_feedback() {
    echo "Starting the Enigma..."
    init 3
    x=0
    while [ "$x" -le 120 ] && [ -z "$(timeout 1 wget -q -O - http://127.0.0.1/web/powerstate)" ] ; do
        x=$(( $x + 1 ))
        sleep 1
        echo "...$x seconds waiting"
    done
    echo "...+5 seconds of additional waiting (other Enigma2 modules such as OpenWebif take a long time to start)"
    sleep 5; x=$(( $x + 5 ))
    echo "...successfully started after $x seconds."
}

do_backup() {
    echo "-----------------------"
    if [ "$1" != "quickly" ]; then         # ignoring the init command to start or stop the Enigma2, if the user choice was '--backup-quickly' argument
        # store the Standby power state when the script starts:  5 = to turn the Enigma2 into Standby ,  4 = to wake-up the Enigma2 from Standby
        wget -q -O - http://127.0.0.1/api/powerstate | grep -iqE '"instandby"\s*:\s*true' && previous_power_state=5 || previous_power_state=4
        init_4_with_feedback
        echo "-----------------------"
    fi
    mkdir -p /tmp/backrest_temp
    BCKP_FILE_TMP="/tmp/backrest_temp/${FILE_PREFIX}_`date '+%Y-%m-%d_%H-%M-%S'`.tar.gz"
    BCKP_FILE_TARGET="${BACKUP_DIR}${FILE_PREFIX}_`date '+%Y-%m-%d_%H-%M-%S'`.tar.gz"
    echo "Output archive file name: "
    echo "    TMP:   ${BCKP_FILE_TMP}  "
    echo "    FINAL: ${BCKP_FILE_TARGET}"
    echo "-----------------------"
    echo "Files and folders to compress:"
    echo "    LIST:  ${LIST}"
    echo "-----------------------"
    echo "Starting compression..."
    [ -z "$BACKUP_DIR" ] || mkdir -p $BACKUP_DIR
    #tar --ignore-failed-read --exclude='/etc/enigma2/epg.dat' -czpf $BACKUP_FILENAME $LIST         # --ignore-failed-read ...... is unfortunately a unknown argument in `tar` under OpenPLi 7.1
    tar --exclude='/etc/enigma2/epg.dat' --exclude='/hdd/epg.dat' --exclude='/media/hdd/epg.dat' -czpf $BCKP_FILE_TMP $LIST
    mv -f $BCKP_FILE_TMP $BCKP_FILE_TARGET
    echo "...compression done."                                                                     # [ $? -eq 0 ] && echo "...done." || echo "...failed ! (exit code = $?)"
    echo "-----------------------"
    echo "List of files in the backup directory:"
    ls -l "${BACKUP_DIR}${FILE_PREFIX}"*
    echo "-----------------------"
    if [ "$1" != "quickly" ]; then         # ignoring the init command to start or stop the Enigma2, if the user choice was '--backup-quickly' argument
        init_3_with_feedback
        echo "Force the Enigma power to its original state : $([ $previous_power_state = 5 ] && echo 'turn the Enigma2 into Standby' || echo 'wake-up the Enigma2 from Standby')"
        wget -q -O - http://127.0.0.1/api/powerstate?newstate=$previous_power_state > /dev/null 2>&1
        echo "-----------------------"
    fi
    rm -rf /tmp/backrest_temp
}

do_restore() {
    echo "-----------------------"
    if ls "${BACKUP_DIR}${FILE_PREFIX}"*.tar.gz > /dev/null 2>&1 ; then
        LATEST_FILE=$(ls -1 "${BACKUP_DIR}${FILE_PREFIX}"*.tar.gz | tail -n 1)
        init_4_with_feedback
        echo "-----------------------"
        echo "The latest archive file found in the directory:"
        echo "    ${LATEST_FILE}"
        echo "-----------------------"
        echo "Installing required plugins..."
        opkg update > /dev/null 2>&1
        opkg install $PLUGINS_TO_RESTORE
        echo "...done."
        echo "-----------------------"
        echo "Starting decompression..."
        tar -C / --overwrite -xzphf $LATEST_FILE
        echo "...done."
        echo "-----------------------"
        if [ -d "/usr/script" ]; then
            echo "Setting the execution rights (attributes) on all files from the '/usr/script' folder."
            chmod a+x /usr/script/*
            echo "...done."
            echo "-----------------------"
        fi
        echo "Restarting the set-top box..."
        echo "(sending the 'init 6' command)"
        init 6
        echo "...done."
        echo "-----------------------"
    else
        echo "ERROR! No archive files ${FILE_PREFIX}*.tar.gz found in the ${BACKUP_DIR} directory!"
        echo "-----------------------"
        exit 1
    fi
}



####################################################
####################################################



case "$1" in
    b|backup|-b|--backup)
        do_backup "normal"
        ;;
    bq|backup-quickly|-bq|--backup-quickly)
        do_backup "quickly"
        ;;
    r|restore|-r|--restore)
        do_restore
        ;; 
    *)
        echo -e "\nUSAGE:"
        echo -e "\t $0 <ARGUMENT>"
        echo -e "ARGUMENT:"
        echo -e "\t b|backup|-b|--backup"
        echo -e "\t\t ...backup user-defined files & folders (Enigma will be stopped during the backup process)"
        echo -e "\t bq|backup-quickly|-bq|--backup-quickly"
        echo -e "\t\t ...backup user-defined files & folders (Enigma will not be stopped during the backup process)"
        echo -e "\t r|restore|-r|--restore"
        echo -e "\t\t ...restore user-defined files & folders - latest archive found in directory (set-top-box will restarted !!!)"
        echo -e "BACKUP DIR:"
        [ -z "$BACKUP_DIR" ] && echo -e "\t $(pwd) (as the current directory)" || echo -e "\t ${BACKUP_DIR}"
        ;;
esac




exit 0
